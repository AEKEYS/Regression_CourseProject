paste(c("Rstudio","is","installed","on"),c("my","computer"),sep=" ")
library(swirl)
swirl()
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_data)
sum(my_na)
my_data
0/0
Inf-Inf
c("RStudio","on","my","computer")
demo(Japanese)
demo()
paste("Rstudio","installed","on","my","computer",collapse=" ")
read.csv("hw1_data.csv")
getwd()
add2 <- function(x, y){
x+y
}
add2(3,5)
above10 <- function(x){
use <- x > 10
x[use]
}
above <- function(x, n){
use <- x > n
x[use]
}
x <- 1:20
above10(x)
above(x,12)
above <- function(x, n=10){
use <- x > n
x[use]
}
above(x)
columnmean <- function(y){
nc <- ncol(y) ##number of columns
means <- numeric(nc) ## numeric vector
for(i in 1:nc){
means[i] <- mean(y[,i])
}
means
}
library(datasets)
data(iris)
?iris
head(iris)
head(iris3)
?tapply
tapply(iris,Species, mean)
tapply(iris,iris$Species, mean)
swirl()
load(swirl)
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
play()
class(iris)
dim(iris)
cls_list2 <- lapply(iris, class)
str(cls_list2)
cls_list2
lapply(iris$Species, mean)
nxt()
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
play()
mean(iris$Sepal.Length)
dim(iris)
head(iris)
nxt()
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
play()
help()
quit()
nxt()
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
play()
table(iris$Species)
nxt()
play()
?table
nxt()
table(flags$animate)
play()
?data.frame
a_data_frame <- data.frame()
a_data_frame <- data.frame(
x = letters[1:5],
y = rnorm(5),
z = runif(5) > 0.5,
animate = c(0,1,0,0,NA),
row.names = c("Margaret", "Allen","Bob","Suzy", "Sam"))
a_data_frame
table(a_data_frame$animate)
nxt()
tapply(flags$animate, flags$landmass, mean)
play()
length(flags$animate)
length(flags$landmass)
names(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
colMeans(iris)
?apply
apply(iris[,1:4],2,mean)
data(mtcars)
?mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
names(mtcars)
with(mtcars, tapply(mpg,cyl,mean))
?with
split(mtcars, mtcars$cyl)
?apply
names(mtcars)
apply(mtcars,2,mean)
sapply(mtcars,cyl,mean)
sapply(mtcars,mean)
averageHorsePowerByCylinder <- with(mtcars, tapply(hp,cyl,mean))
averageHorsePowerByCylinder
averageHorsePowerByCylinder[3]
averageHorsePowerByCylinder[[3]]
averageHorsePowerByCylinder[[3]]-averageHorsePowerByCylinder[[1]]
?solv
?solve
ls
ls()
shape_mat
?matrix
a_matrix <- matrix(c(1,2,4,2), nrow=2, ncol=2)
a_matrix
solve(a_matrix)
solve(a_matrix) %*% a_matrix
getwd()
library(swirl)
swirl()
play()
ls()
nxt()
tapply(flags$population,flags$red,summary)
play()
str(flags)
nxt()
tapply(flags$population, flags$landmass, summary)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
play()
set.seed(1)
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
set.seed(1)
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
nxt()
sample(1:20,10)
LETTERS
play()
str(LETTERS)
nxt()
sample(LETTERS,26)
SAMPLE(LETTERS)
sample(LETTERS)
flips<-sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,size=100,prob=0.7)
flips2 <- rbinom(100,size=1,prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean=100,sd=25)
play()
?rpois
rpois(5,10)
mean(rpois(5,10))
nxt()
rpois(5,10)
my_pois <- replicate(100, rpois(5,10))
my_pois
play()
str(my_pois)
?transpose
?t
t(my_pois)
nxt()
cm<-colMeans(my_pois)
hist(cm)
set.seed(20)
x <- rnorm(100)
e <- rnorm(100,0,2)
y <- 0.5 + 2 * x + e
summary(y)
plot(x,y)
set.seed(10)
x<-rbinom(100,1,0.5)
e <- rnorm(100,0,2)
y<-0.5+2*x+e
summary(y)
plot(x,y)
set.seed(1)
x<-rnorm(100)
log.mu<-0.5+.3*x
str(log.mu)
str(exp(log.mu))
?exp
exp(1)
2^2
2**2
3^3
3**3
exp(3)
exp(27)
exp(1)^3
y<-rpois(100,exp(log.mu))
?rpois
summary(y)
plot(x,y)
hist(log.mu)
plot(x,y)
str(x)
?sample
system.time(readLines("http://www.jhsph.edu"))
?svd
?outer
?dim
?outer
hilbert<-function(n){
i <- 1:n
1/outer(i-1,i,"+")
}
x<-hilbert(1000)
str(x)
head(x)
x[,1:10]
x[1:6,1:10]
system.time(svd(x))
3/20
2/20
15/20
2/20
16/20
?tapply
1100 + c(-1,1)*30/sqrt(8)*qt(.975,9-1)
2 *sqrt(9-1)/qt(.975,9-1)
sqrt(8)
setwd("~/Developer/DataScienceJHU/Regression/Regression_CourseProject")
library(datasets);data(mtcars)
y <- mtcars$mpg #outcome
n <- length(y)
for (i in c(2,8:11)){
mtcars[,i]<-as.factor(mtcars[,i]) #qualitative variables
}
levels(mtcars$am) <- c("auto","man") #give levels more descriptive names
fitBoth <- lm(mpg ~ wt + am, data=mtcars)
summary(fitBoth)
fitBoth <- lm(mpg ~ am + wt, data=mtcars)
summary(fitBoth)
fitBoth <- lm(mpg ~ wt + am, data=mtcars)
plot(mtcars$wt,mtcars$mpg,type="n")
points(mtcars$wt,mtcars$mpg,pch=19,col=((mtcars$am=="auto")*1+1))
abline(c(fitBoth$coeff[1],fitBoth$coeff[2]),col="red",lwd=3)
abline(c(fitBoth$coeff[1]+fitBoth$coeff[3],fitBoth$coeff[2]),col="black",lwd=3)
fitBoth
summary(fitBoth)
fitBoth <- lm(mpg ~ wt + am + wt*am, data=mtcars)
summary(fitBoth)
fitBoth <- lm(mpg ~ wt + am, data=mtcars)
plot(mtcars$wt,mtcars$mpg,type="n")
points(mtcars$wt,mtcars$mpg,pch=19,col=((mtcars$am=="auto")*1+1))
abline(c(fitBoth$coeff[1],fitBoth$coeff[2]),col="red",lwd=3)
abline(c(fitBoth$coeff[1]+fitBoth$coeff[3],fitBoth$coeff[2]),col="black",lwd=3)
summary(fitBoth) #no difference between auto and manual
summary(mtcars)
fitAll <- lm(mpg ~ wt + hp + am + am*wt + am*hp)
fitAll <- lm(mpg ~ wt + hp + am + am*wt + am*hp, data=mtcars)
summary(fitAll)
par(mfrow=c(2,5), mar=c(3,1,2,1),oma=c(1,1,2,1))
for (i in c(2:11)){
plot(as.numeric(mtcars[,i]),mtcars$mpg,
type="p",
pch=21,
bg=i,
main=names(mtcars)[i],
cex.main=.8)
}
title(main="Visual Correlation With MPG",outer=TRUE)
par(mar=c(4,4,1,1), oma=c(1,1,1,1), mfrow=c(1,1))
fitAll <- lm(mpg ~ wt + hp + am + disp + am*wt + am*hp + am*disp, data=mtcars)
summary(fitAll)
